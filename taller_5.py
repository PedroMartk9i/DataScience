# -*- coding: utf-8 -*-
"""Taller#5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ez0KUISgyP-rPYuiY1XR_g_9-CFLv-le
"""

import numpy as np
import matplotlib.pyplot as plt

eje_x = []
eje_y = []

plt.figure(figsize=(3, 3))
plt.scatter(eje_x, eje_y, s=2, c='blue', alpha=0.5)
circle = plt.Circle((0, 0), 1, color='blue', fill=False)
plt.gca().add_patch(circle)

plt.xlabel('Coordenada X')
plt.ylabel('Coordenada Y')
plt.title('Cuadrícula con Circunferencia')
plt.grid(False)

plt.grid(True, linestyle='--', alpha=0.5)

#límites del gráfico
plt.xlim(-0.1, 1.0)
plt.ylim(-0.1, 1.0)

plt.gca().set_aspect('equal', adjustable='box')

plt.show()

import numpy as np

puntos = 1000000
lado_cuadricula = 1.0
p_lado = int(puntos**0.5)
separacion = 1/(p_lado-1)
puntos_en_circulo = 0

for i in range(p_lado):
    for j in range(p_lado):
        x = i * separacion
        y = j * separacion
        distancia = np.sqrt(x**2 + y**2)

        if distancia <= 1:
            puntos_en_circulo += 1

# Estimación de π
estimacion_pi = 4 * puntos_en_circulo / puntos

print("Cantidad de puntos dentro de la circunferencia:", puntos_en_circulo)
print("Estimación de π:", estimacion_pi)

import numpy as np

puntos = 1000000
puntos_en_circulo = 0

for _ in range(puntos):
    x = np.random.uniform(0, 1)
    y = np.random.uniform(0, 1)
    distancia = np.sqrt(x**2 + y**2)

    if distancia <= 1:
        puntos_en_circulo += 1

# Estimación de π
estimacion_pi = 4 * puntos_en_circulo / puntos

print("Cantidad de puntos dentro de la circunferencia:", puntos_en_circulo)
print("Estimación de π:", estimacion_pi)
