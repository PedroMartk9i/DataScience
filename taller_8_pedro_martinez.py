# -*- coding: utf-8 -*-
"""Taller #8- Pedro Martinez

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jjgPpBd6mTDBqTrqxkBXXn4ssHN7eZkx
"""

!pip install matplotlib numpy pandas seaborn scikit-learn ipython
!pip install kneed

import matplotlib.pyplot as plt
from kneed import KneeLocator
from sklearn.datasets import make_blobs
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.preprocessing import StandardScaler
import pandas as pd
from sklearn.preprocessing import OrdinalEncoder

ruta = 'https://raw.githubusercontent.com/fmoreno4/cd-files/main/eventos_dengue_2020.csv'
df = pd.read_csv(ruta)
df

pd.set_option('display.max_columns', None)
df.head(10)

df.dtypes

df.isnull().sum()

df['sexo_'] = df['sexo_'].replace({'F': 0, 'M': 1})

df['sexo_'] = df['sexo_'].astype(int)

columnas_a_eliminar = ['fec_hos_', 'fecha_defuncion', 'certif_defuncion']
df = df.drop(columnas_a_eliminar, axis=1)

valores_unicos = df['conducta'].unique()

# Imprimir los valores únicos
print("Valores únicos en la columna 'conducta':", valores_unicos)

valores_unicos = df['tip_ss_'].unique()

# Imprimir los valores únicos
print("Valores únicos en la columna 'tip_ss_':", valores_unicos)

valores_unicos = df['uni_med_'].unique()

# Imprimir los valores únicos
print("Valores únicos en la columna 'uni_med_':", valores_unicos)

df['edad'] = df.apply(lambda row: row['edad_'] if row['uni_med_'] == 1 else 0, axis=1)

# Crear columnas binarias para la columna 'conducta' y asignar 1 si corresponde a esa conducta y 0 si no
conducta_tipos = pd.get_dummies(df['conducta'], prefix='conducta')

# Concatenar las nuevas columnas binarias al DataFrame original
df = pd.concat([df, conducta_tipos], axis=1)

# Crear columnas binarias para la columna 'tip_ss_' y asignar 1 si corresponde a esa categoría y 0 si no
tip_ss_tipos = pd.get_dummies(df['tip_ss_'], prefix='tip_ss')

# Concatenar las nuevas columnas binarias al DataFrame original
df = pd.concat([df, tip_ss_tipos], axis=1)

valores_unicos = df['edad'].unique()

# Imprimir los valores únicos
print("Valores únicos en la columna 'edad_':", valores_unicos)

cantidad_ceros = df['edad'].value_counts().get(0, 0)

# Imprimir la cantidad de valores 0 en la columna edad_
print("Cantidad de valores 0 en la columna 'edad_':", cantidad_ceros)

# Lista de nombres de las columnas que quieres eliminar
columnas_a_eliminar = ['edad_','uni_med_','tip_ss_','conducta','fec_not', 'cod_pais_o', 'cod_dpto_o', 'cod_mun_o', 'area_', 'ocupacion_', 'cod_ase_', 'fecha_contagio', 'inicio_sintomas', 'fecha_nacimiento']

# Eliminar las columnas especificadas
df = df.drop(columns=columnas_a_eliminar)

df.dtypes

df.isnull().sum()

df

features = df.iloc[:, :]

# Inicializar el objeto StandardScaler
scaler = StandardScaler()

# Aplicar el escalado estándar a las características
scaled_features = scaler.fit_transform(features)

kmeans_kwargs = {
  "init": "random",
  "n_init": 10,
  "max_iter": 300,
  "random_state": 42,
}

sse = []
for k in range(1, 11):
  kmeans = KMeans(n_clusters=k, **kmeans_kwargs)
  kmeans.fit(scaled_features)
  sse.append(kmeans.inertia_)

plt.style.use("fivethirtyeight")
plt.plot(range(1, 11), sse)
plt.xticks(range(1, 11))
plt.xlabel("Number of Clusters")
plt.ylabel("SSE")
plt.show()

kl = KneeLocator(
  range(1, 11), sse, curve="convex", direction="decreasing"
)
kl.elbow

silhouette_coefficients = []

#Aquí se inicia con 2 cluester
for k in range(2, 11):
  kmeans = KMeans(n_clusters=k, **kmeans_kwargs)
  kmeans.fit(scaled_features)
  score = silhouette_score(scaled_features, kmeans.labels_)
  silhouette_coefficients.append(score)

plt.style.use("fivethirtyeight")
plt.plot(range(2, 11), silhouette_coefficients)
plt.xticks(range(2, 11))
plt.xlabel("Number of Clusters")
plt.ylabel("Silhouette Coefficient")
plt.show()

kmeans = KMeans(
  init="random",
  n_clusters=2,
  n_init=10,
  max_iter=300,
  random_state=42
)

etiquetas = kmeans.fit_predict(scaled_features)

kmeans.fit(scaled_features)

# Cuadrado de errores estándar más bajo (SSE)
kmeans.inertia_

# Posición final de los centroides
kmeans.cluster_centers_

# Número de iteraciones requeridas
kmeans.n_iter_

kmeans.labels_

print(kmeans.labels_)

df['Cluster'] = etiquetas

df

df_cluster_0 = df[df['Cluster'] == 0].drop(columns=['Cluster'])
df_cluster_1 = df[df['Cluster'] == 1].drop(columns=['Cluster'])

df_cluster_0

df_cluster_1