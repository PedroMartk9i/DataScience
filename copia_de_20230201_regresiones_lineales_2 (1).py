# -*- coding: utf-8 -*-
"""Copia de 20230201 - Regresiones lineales 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C24pQNodXkrREqO8WL5HJgyGrwWN_WLb
"""

import pandas as pd
import numpy as np
import seaborn as sb
import matplotlib.pyplot as plt
from matplotlib import colors
from scipy.stats import pearsonr, zscore

import statsmodels.api as sm
import statsmodels.formula.api as smf

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error, r2_score
from sklearn import linear_model

#Datos de propiedades
ruta = 'https://raw.githubusercontent.com/rasief/cartografia/master/melb_data.csv'
df = pd.read_csv(ruta)
df

df.dtypes

df = df.select_dtypes(exclude=['object'])
df

#Buscar nulos
df.isnull().sum()

#Borrado de datos nulos
df = df.dropna()
df

#Histograma
df.Price.hist(color='firebrick', bins=100, figsize=(10, 6))

#Diagrama de distribución
fig, ax = plt.subplots(figsize=(10, 6))
df.plot(x = 'BuildingArea', y = 'Price', c = 'navy', kind = "scatter", ax = ax)
ax.set_title('Distribución de precio y area construida');

#Datos con área menor o igual a 800
df0 = df[df["BuildingArea"]<=800]
df0

#Diagrama de distribución
fig, ax = plt.subplots(figsize=(10, 6))
df0.plot(x = 'BuildingArea', y = 'Price', c = 'navy', kind = "scatter", ax = ax)
ax.set_title('Distribución de precio y area construida');

#Datos con área cero
dfzero = df0[df0["BuildingArea"]<5]
len(dfzero)

#Se eliminan los registros de menos de 15 mts cuadrados de area
df0 = df0[df0["BuildingArea"]>=5]
df0

#Se eliminan todos los datos que estén más allá de 3 desviaciones estándar
df0 = df0[(np.abs(zscore(df0['BuildingArea']))<=3)]
df0

#Boxplot
ax = sb.boxplot(data=df0['BuildingArea'].values, orient='h', color='yellow')
ax.set_title('Boxplot area construida');
plt.show()

#Múltiples diagramas por parejas
#sb.set_theme(style="ticks")
#sb.pairplot(df0, hue='Rooms')

#Correlación entre variables
corr_test = pearsonr(x = df['BuildingArea'], y = df['Price'])
print("Coeficiente de correlación de Pearson: ", corr_test[0])
print("P-value: ", corr_test[1])

colormap = plt.cm.viridis
plt.figure(figsize=(10, 10))
plt.title('Pearson Correlation of Features', y=1.05, size=15)
sb.heatmap(df.astype(float).corr(),linewidths=0.1,vmax=1.0, square=True, cmap=colormap, linecolor='white', annot=True)

sb.set_theme(color_codes=True)
sb.set_theme(style="ticks")
ax = sb.regplot(x="BuildingArea", y="Price", data=df0, marker='+', x_jitter=0.2, y_jitter=0.2)
ax.set_title('Distribución de precio y area construida')

#sb.pairplot(df0, kind='reg')

#Regresión lineal (Area construida vs. Precio)
x = df0["BuildingArea"]
y = df0["Price"]
x2 = sm.add_constant(x)
est = sm.OLS(y, x2)
est2 = est.fit()
print(est2.summary())

df0.dtypes

#Regresión lineal múltiple
x = df0.iloc[:,[0,5,8]]
y = df0["Price"]
x2 = sm.add_constant(x)
est = sm.OLS(y, x2)
est2 = est.fit()
print(est2.summary())

df0.drop(columns={'Bedroom2', 'Postcode', 'Lattitude', 'Longtitude'}, inplace=True)
df0

diccionario = {}
dataset=[0,2,3,4,5,6,7,8]
for i in dataset:
    for j in dataset:
      for k in dataset:
          if i != j and i != k and j != k:
            print(i, j, k)
            x = df0.iloc[:,[i,j,k]]
            y = df0["Price"]
            x2 = sm.add_constant(x)
            est = sm.OLS(y, x2)
            est2 = est.fit()
            print(est2.summary(),"\n\n+++++++++++++++++++++++++++++++++++\n\n")
            print(est2.rsquared)
            diccionario[i, j, k] = est2.rsquared
print(diccionario)
# Encontrar la clave y el valor con el valor más grande
clave_max = max(diccionario, key=diccionario.get)
valor_max = diccionario[clave_max]
print("\n\n")
# Imprimir la clave y el valor correspondientes al valor más grande
print(f"Los índices con el valor más grande de R^2 fueron: {clave_max}")
print(f"El R^2 es: {valor_max}")

"""Los índices con el valor más grande de R^2 fueron: (7, 6, 2)
El R^2 es: 0.5636921831256391

"""